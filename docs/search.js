window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "outrank", "modulename": "outrank", "kind": "module", "doc": "<h1 id=\"welcome-to-outranks-documentation\">Welcome to OutRank's documentation!</h1>\n\n<p>All functions/methods can be searched-for (search bar on the left).</p>\n\n<p>This tool enables fast screening of feature-feature interactions. Its purpose is to give the user fast insight into potential redundancies/anomalies in the data.\nIt is implemented to operate in _mini batches_, it traverses the <code>raw data</code> incrementally, refining the rankings as it goes along. The core operation, interaction ranking, outputs triplets which look as follows:</p>\n\n<pre><code>featureA    featureB    0.512\nfeatureA    featureC    0.125\n</code></pre>\n\n<h1 id=\"setup\">Setup</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>outrank\n</code></pre>\n</div>\n\n<p>and test a minimal cycle with</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>outrank<span class=\"w\"> </span>--task<span class=\"w\"> </span>selftest\n</code></pre>\n</div>\n\n<p>if this passes, you can be pretty certain OutRank will perform as intended. OutRank's primary use case is as a CLI tool, begin exploring with</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>outrank<span class=\"w\"> </span>--help\n</code></pre>\n</div>\n\n<h1 id=\"example-use-cases\">Example use cases</h1>\n\n<ul>\n<li><p>A minimal showcase of performing feature ranking on a generic CSV is demonstrated with <a href=\"https://github.com/outbrain/outrank/tree/main/scripts/run_minimal.sh\">this example</a>.</p></li>\n<li><p><a href=\"https://github.com/outbrain/outrank/tree/main/examples\">More examples</a> demonstrating OutRank's capabilities are also available.</p></li>\n</ul>\n\n<h1 id=\"outrank-as-a-python-library\">OutRank as a Python library</h1>\n\n<p>Once installed, _OutRank_ can be used as any other Python library. For example, generic feature ranking algorithms can be accessed as</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">outrank.algorithms.feature_ranking.ranking_mi_numba</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">mutual_info_estimator_numba</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Some synthetic minimal data (Numpy vectors)</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n\n<span class=\"n\">lowest</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">permutation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n<span class=\"n\">medium</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n<span class=\"n\">high</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n\n<span class=\"n\">lowest_score</span> <span class=\"o\">=</span> <span class=\"n\">mutual_info_estimator_numba</span><span class=\"p\">(</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">lowest</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">medium_score</span> <span class=\"o\">=</span> <span class=\"n\">mutual_info_estimator_numba</span><span class=\"p\">(</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">medium</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">high_score</span> <span class=\"o\">=</span> <span class=\"n\">mutual_info_estimator_numba</span><span class=\"p\">(</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">high</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">),</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">scores</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">lowest_score</span><span class=\"p\">,</span> <span class=\"n\">medium_score</span><span class=\"p\">,</span> <span class=\"n\">high_score</span><span class=\"p\">]</span>\n<span class=\"n\">sorted_score_indices</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">argsort</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"n\">sorted_score_indices</span><span class=\"p\">)</span> <span class=\"o\">==</span>  <span class=\"mi\">0</span>\n</code></pre>\n</div>\n\n<hr />\n\n<h2 id=\"creating-a-simple-dataset\">Creating a simple dataset</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">outrank.algorithms.synthetic_data_generators.cc_generator</span> <span class=\"kn\">import</span> <span class=\"n\">CategoricalClassification</span>\n\n<span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">CategoricalClassification</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Creates a simple dataset of 10 features, 10k samples, with feature cardinality of all features being 35</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">generate_data</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> \n                     <span class=\"mi\">10000</span><span class=\"p\">,</span> \n                     <span class=\"n\">cardinality</span><span class=\"o\">=</span><span class=\"mi\">35</span><span class=\"p\">,</span> \n                     <span class=\"n\">ensure_rep</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n                     <span class=\"n\">random_values</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> \n                     <span class=\"n\">low</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> \n                     <span class=\"n\">high</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Creates target labels via clustering</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">generate_labels</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">class_relation</span><span class=\"o\">=</span><span class=\"s1\">&#39;cluster&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "outrank.algorithms", "modulename": "outrank.algorithms", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.feature_ranking", "modulename": "outrank.algorithms.feature_ranking", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.feature_ranking.ranking_mi_numba", "modulename": "outrank.algorithms.feature_ranking.ranking_mi_numba", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.feature_ranking.ranking_mi_numba.numba_unique", "modulename": "outrank.algorithms.feature_ranking.ranking_mi_numba", "qualname": "numba_unique", "kind": "function", "doc": "<p>Identify unique elements in an array, fast</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.feature_ranking.ranking_mi_numba.compute_conditional_entropy", "modulename": "outrank.algorithms.feature_ranking.ranking_mi_numba", "qualname": "compute_conditional_entropy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Y_classes</span>,</span><span class=\"param\">\t<span class=\"n\">class_values</span>,</span><span class=\"param\">\t<span class=\"n\">class_var_shape</span>,</span><span class=\"param\">\t<span class=\"n\">initial_prob</span>,</span><span class=\"param\">\t<span class=\"n\">nonzero_counts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.feature_ranking.ranking_mi_numba.compute_entropies", "modulename": "outrank.algorithms.feature_ranking.ranking_mi_numba", "qualname": "compute_entropies", "kind": "function", "doc": "<p>Core entropy computation function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">all_events</span>, </span><span class=\"param\"><span class=\"n\">f_values</span>, </span><span class=\"param\"><span class=\"n\">f_value_counts</span>, </span><span class=\"param\"><span class=\"n\">cardinality_correction</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.feature_ranking.ranking_mi_numba.stratified_subsampling", "modulename": "outrank.algorithms.feature_ranking.ranking_mi_numba", "qualname": "stratified_subsampling", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">approximation_factor</span>, </span><span class=\"param\"><span class=\"n\">_f_values_X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.feature_ranking.ranking_mi_numba.mutual_info_estimator_numba", "modulename": "outrank.algorithms.feature_ranking.ranking_mi_numba", "qualname": "mutual_info_estimator_numba", "kind": "function", "doc": "<p>Core estimator logic. Compute unique elements, subset if required</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">approximation_factor</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>, </span><span class=\"param\"><span class=\"n\">cardinality_correction</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.importance_estimator", "modulename": "outrank.algorithms.importance_estimator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.importance_estimator.logger", "modulename": "outrank.algorithms.importance_estimator", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger syn-logger (DEBUG)&gt;"}, {"fullname": "outrank.algorithms.importance_estimator.num_folds", "modulename": "outrank.algorithms.importance_estimator", "qualname": "num_folds", "kind": "variable", "doc": "<p></p>\n", "default_value": "4"}, {"fullname": "outrank.algorithms.importance_estimator.sklearn_MI", "modulename": "outrank.algorithms.importance_estimator", "qualname": "sklearn_MI", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vector_first</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">vector_second</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.importance_estimator.sklearn_surrogate", "modulename": "outrank.algorithms.importance_estimator", "qualname": "sklearn_surrogate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">vector_first</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">vector_second</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">surrogate_model</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.importance_estimator.numba_mi", "modulename": "outrank.algorithms.importance_estimator", "qualname": "numba_mi", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vector_first</span>, </span><span class=\"param\"><span class=\"n\">vector_second</span>, </span><span class=\"param\"><span class=\"n\">heuristic</span>, </span><span class=\"param\"><span class=\"n\">mi_stratified_sampling_ratio</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.importance_estimator.sklearn_mi_adj", "modulename": "outrank.algorithms.importance_estimator", "qualname": "sklearn_mi_adj", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vector_first</span>, </span><span class=\"param\"><span class=\"n\">vector_second</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.importance_estimator.get_importances_estimate_pairwise", "modulename": "outrank.algorithms.importance_estimator", "qualname": "get_importances_estimate_pairwise", "kind": "function", "doc": "<p>A method for parallel importances estimation. As interaction scoring is independent, individual scores can be computed in parallel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">combination</span>, </span><span class=\"param\"><span class=\"n\">reference_model_features</span>, </span><span class=\"param\"><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">tmp_df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.importance_estimator.rank_features_3MR", "modulename": "outrank.algorithms.importance_estimator", "qualname": "rank_features_3MR", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">relevance_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">redundancy_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">relational_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">strategy</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;median&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.importance_estimator.get_importances_estimate_nonmyopic", "modulename": "outrank.algorithms.importance_estimator", "qualname": "get_importances_estimate_nonmyopic", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">tmp_df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.importance_estimator.initialize_classifier", "modulename": "outrank.algorithms.importance_estimator", "qualname": "initialize_classifier", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">surrogate_model</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.sketches", "modulename": "outrank.algorithms.sketches", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_cms", "modulename": "outrank.algorithms.sketches.counting_cms", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_cms.cms_hash", "modulename": "outrank.algorithms.sketches.counting_cms", "qualname": "cms_hash", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">seed</span>, </span><span class=\"param\"><span class=\"n\">width</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.sketches.counting_cms.CountMinSketch", "modulename": "outrank.algorithms.sketches.counting_cms", "qualname": "CountMinSketch", "kind": "class", "doc": "<p>A memory-efficient implementation of the count min sketch algorithm with optimized hashing using Numba JIT.</p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_cms.CountMinSketch.__init__", "modulename": "outrank.algorithms.sketches.counting_cms", "qualname": "CountMinSketch.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">6</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">32768</span>, </span><span class=\"param\"><span class=\"n\">M</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "outrank.algorithms.sketches.counting_cms.CountMinSketch.depth", "modulename": "outrank.algorithms.sketches.counting_cms", "qualname": "CountMinSketch.depth", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_cms.CountMinSketch.width", "modulename": "outrank.algorithms.sketches.counting_cms", "qualname": "CountMinSketch.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_cms.CountMinSketch.hash_seeds", "modulename": "outrank.algorithms.sketches.counting_cms", "qualname": "CountMinSketch.hash_seeds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_cms.CountMinSketch.M", "modulename": "outrank.algorithms.sketches.counting_cms", "qualname": "CountMinSketch.M", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_cms.CountMinSketch.add", "modulename": "outrank.algorithms.sketches.counting_cms", "qualname": "CountMinSketch.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">delta</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.sketches.counting_cms.CountMinSketch.batch_add", "modulename": "outrank.algorithms.sketches.counting_cms", "qualname": "CountMinSketch.batch_add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lst</span>, </span><span class=\"param\"><span class=\"n\">delta</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.sketches.counting_cms.CountMinSketch.query", "modulename": "outrank.algorithms.sketches.counting_cms", "qualname": "CountMinSketch.query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.sketches.counting_cms.CountMinSketch.get_matrix", "modulename": "outrank.algorithms.sketches.counting_cms", "qualname": "CountMinSketch.get_matrix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.sketches.counting_counters_ordinary", "modulename": "outrank.algorithms.sketches.counting_counters_ordinary", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_counters_ordinary.PrimitiveConstrainedCounter", "modulename": "outrank.algorithms.sketches.counting_counters_ordinary", "qualname": "PrimitiveConstrainedCounter", "kind": "class", "doc": "<p>A memory-efficient implementation of the count min sketch algorithm with optimized hashing using Numba JIT.</p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_counters_ordinary.PrimitiveConstrainedCounter.__init__", "modulename": "outrank.algorithms.sketches.counting_counters_ordinary", "qualname": "PrimitiveConstrainedCounter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bound</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30000</span></span>)</span>"}, {"fullname": "outrank.algorithms.sketches.counting_counters_ordinary.PrimitiveConstrainedCounter.max_bound_thr", "modulename": "outrank.algorithms.sketches.counting_counters_ordinary", "qualname": "PrimitiveConstrainedCounter.max_bound_thr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_counters_ordinary.PrimitiveConstrainedCounter.default_counter", "modulename": "outrank.algorithms.sketches.counting_counters_ordinary", "qualname": "PrimitiveConstrainedCounter.default_counter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": collections.Counter"}, {"fullname": "outrank.algorithms.sketches.counting_counters_ordinary.PrimitiveConstrainedCounter.batch_add", "modulename": "outrank.algorithms.sketches.counting_counters_ordinary", "qualname": "PrimitiveConstrainedCounter.batch_add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lst</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.sketches.counting_counters_ordinary.PrimitiveConstrainedCounter.add", "modulename": "outrank.algorithms.sketches.counting_counters_ordinary", "qualname": "PrimitiveConstrainedCounter.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.sketches.counting_ultiloglog", "modulename": "outrank.algorithms.sketches.counting_ultiloglog", "kind": "module", "doc": "<p>This module implements probabilistic data structure which is able to calculate the cardinality of large multisets in a single pass using little auxiliary memory</p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_ultiloglog.HyperLogLogWCache", "modulename": "outrank.algorithms.sketches.counting_ultiloglog", "qualname": "HyperLogLogWCache", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_ultiloglog.HyperLogLogWCache.__init__", "modulename": "outrank.algorithms.sketches.counting_ultiloglog", "qualname": "HyperLogLogWCache.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_rate</span><span class=\"o\">=</span><span class=\"mf\">0.005</span></span>)</span>"}, {"fullname": "outrank.algorithms.sketches.counting_ultiloglog.HyperLogLogWCache.p", "modulename": "outrank.algorithms.sketches.counting_ultiloglog", "qualname": "HyperLogLogWCache.p", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_ultiloglog.HyperLogLogWCache.m", "modulename": "outrank.algorithms.sketches.counting_ultiloglog", "qualname": "HyperLogLogWCache.m", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_ultiloglog.HyperLogLogWCache.warmup_set", "modulename": "outrank.algorithms.sketches.counting_ultiloglog", "qualname": "HyperLogLogWCache.warmup_set", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_ultiloglog.HyperLogLogWCache.warmup_size", "modulename": "outrank.algorithms.sketches.counting_ultiloglog", "qualname": "HyperLogLogWCache.warmup_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_ultiloglog.HyperLogLogWCache.width", "modulename": "outrank.algorithms.sketches.counting_ultiloglog", "qualname": "HyperLogLogWCache.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_ultiloglog.HyperLogLogWCache.hll_flag", "modulename": "outrank.algorithms.sketches.counting_ultiloglog", "qualname": "HyperLogLogWCache.hll_flag", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.sketches.counting_ultiloglog.HyperLogLogWCache.add", "modulename": "outrank.algorithms.sketches.counting_ultiloglog", "qualname": "HyperLogLogWCache.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.synthetic_data_generators", "modulename": "outrank.algorithms.synthetic_data_generators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.synthetic_data_generators.cc_generator", "modulename": "outrank.algorithms.synthetic_data_generators.cc_generator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.synthetic_data_generators.cc_generator.CategoricalClassification", "modulename": "outrank.algorithms.synthetic_data_generators.cc_generator", "qualname": "CategoricalClassification", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.synthetic_data_generators.cc_generator.CategoricalClassification.__init__", "modulename": "outrank.algorithms.synthetic_data_generators.cc_generator", "qualname": "CategoricalClassification.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">42</span></span>)</span>"}, {"fullname": "outrank.algorithms.synthetic_data_generators.cc_generator.CategoricalClassification.dataset_info", "modulename": "outrank.algorithms.synthetic_data_generators.cc_generator", "qualname": "CategoricalClassification.dataset_info", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.synthetic_data_generators.cc_generator.CategoricalClassification.generate_data", "modulename": "outrank.algorithms.synthetic_data_generators.cc_generator", "qualname": "CategoricalClassification.generate_data", "kind": "function", "doc": "<p>Generates dataset based on given parameters</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_features</strong>:  number of generated features</li>\n<li><strong>n_samples</strong>:  number of generated samples</li>\n<li><strong>cardinality</strong>:  default cardinality of the dataset</li>\n<li><strong>structure</strong>:  structure of the dataset</li>\n<li><strong>ensure_rep</strong>:  flag, ensures all given values represented</li>\n<li><strong>random_values</strong>:  flag, enables random (integer) feature values from set [low, high]</li>\n<li><strong>low</strong>:  sets lower bound of random feature values</li>\n<li><strong>high</strong>:  sets high bound of random feature values</li>\n<li><strong>seed</strong>:  sets seed of numpy random</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>X, 2D dataset</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">n_samples</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cardinality</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ensure_rep</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_values</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">low</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">high</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">42</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.synthetic_data_generators.cc_generator.CategoricalClassification.generate_combinations", "modulename": "outrank.algorithms.synthetic_data_generators.cc_generator", "qualname": "CategoricalClassification.generate_combinations", "kind": "function", "doc": "<p>Generates linear, nonlinear, or custom combinations within feature vectors in given dataset X</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  dataset</li>\n<li><strong>feature_indices</strong>:  indexes of features to be in combination</li>\n<li><strong>combination_function</strong>:  optional custom function for combining feature vectors</li>\n<li><strong>combination_type</strong>:  string flag, either liner or nonlinear, defining combination type</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>X with added resultant feature</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">feature_indices</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">combination_function</span><span class=\"p\">:</span> <span class=\"n\">Optional</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">combination_type</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;linear&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nonlinear&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;linear&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.synthetic_data_generators.cc_generator.CategoricalClassification.generate_correlated", "modulename": "outrank.algorithms.synthetic_data_generators.cc_generator", "qualname": "CategoricalClassification.generate_correlated", "kind": "function", "doc": "<p>Generates correlated features using the given feature indices. Correlation is based on cosine of angle between vectors with mean 0.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  dataset</li>\n<li><strong>feature_indices</strong>:  indices of features to generate correlated feature to</li>\n<li><strong>r</strong>:  (Pearson) correlation factor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>X with generated correlated  features</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">feature_indices</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.synthetic_data_generators.cc_generator.CategoricalClassification.generate_duplicates", "modulename": "outrank.algorithms.synthetic_data_generators.cc_generator", "qualname": "CategoricalClassification.generate_duplicates", "kind": "function", "doc": "<p>Generates duplicate features</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  dataset</li>\n<li><strong>feature_indices</strong>:  indices of features to duplicate</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dataset with duplicated features</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">feature_indices</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.synthetic_data_generators.cc_generator.CategoricalClassification.generate_labels", "modulename": "outrank.algorithms.synthetic_data_generators.cc_generator", "qualname": "CategoricalClassification.generate_labels", "kind": "function", "doc": "<p>Generates labels for dataset X</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  dataset</li>\n<li><strong>n</strong>:  number of class labels</li>\n<li><strong>p</strong>:  class distribution</li>\n<li><strong>k</strong>:  constant</li>\n<li><strong>decision_function</strong>:  optional user-defined decision function</li>\n<li><strong>class_relation</strong>:  string, either 'linear', 'nonlinear', or 'cluster'</li>\n<li><strong>balance</strong>:  boolean, whether to balance clustering class labels</li>\n<li><strong>random_state</strong>:  seed for KMeans clustering, defaults to 42</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>array of labels, corresponding to dataset X</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">decision_function</span><span class=\"p\">:</span> <span class=\"n\">Optional</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">class_relation</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;linear&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nonlinear&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cluster&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;linear&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">balance</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">42</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.synthetic_data_generators.cc_generator.CategoricalClassification.generate_noise", "modulename": "outrank.algorithms.synthetic_data_generators.cc_generator", "qualname": "CategoricalClassification.generate_noise", "kind": "function", "doc": "<p>Simulates noise on given dataset X</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  dataset to apply noise to</li>\n<li><strong>y</strong>:  required target labels for categorical noise generation</li>\n<li><strong>p</strong>:  amount of noise to apply. Defaults to 0.2</li>\n<li><strong>type</strong>:  type of noise to apply, either categorical or missing</li>\n<li><strong>missing_val</strong>:  value to simulate missing values. Defaults to float('-inf')</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>X with noise applied</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;categorical&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;missing&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;categorical&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">missing_val</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">inf</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.synthetic_data_generators.cc_generator.CategoricalClassification.downsample_dataset", "modulename": "outrank.algorithms.synthetic_data_generators.cc_generator", "qualname": "CategoricalClassification.downsample_dataset", "kind": "function", "doc": "<p>Downsamples dataset X according to N or the number of samples in minority class, resulting in a balanced dataset.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  Dataset to downsample</li>\n<li><strong>y</strong>:  Labels corresponding to X</li>\n<li><strong>N</strong>:  Optional number of samples per class to downsample to</li>\n<li><strong>seed</strong>:  Seed for random state of resample function</li>\n<li><strong>reshuffle</strong>:  Reshuffle the dataset after downsampling</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Balanced X and y after downsampling</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">reshuffle</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.synthetic_data_generators.cc_generator.CategoricalClassification.print_dataset", "modulename": "outrank.algorithms.synthetic_data_generators.cc_generator", "qualname": "CategoricalClassification.print_dataset", "kind": "function", "doc": "<p>Prints given dataset</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong>:  dataset</li>\n<li><strong>y</strong>:  labels</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_typing</span><span class=\"o\">.</span><span class=\"n\">_nested_sequence</span><span class=\"o\">.</span><span class=\"n\">_NestedSequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.algorithms.synthetic_data_generators.generator_naive", "modulename": "outrank.algorithms.synthetic_data_generators.generator_naive", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.algorithms.synthetic_data_generators.generator_naive.generate_random_matrix", "modulename": "outrank.algorithms.synthetic_data_generators.generator_naive", "qualname": "generate_random_matrix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_features</span><span class=\"o\">=</span><span class=\"mi\">100</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">20000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking", "modulename": "outrank.core_ranking", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.core_ranking.logger", "modulename": "outrank.core_ranking", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger syn-logger (DEBUG)&gt;"}, {"fullname": "outrank.core_ranking.GLOBAL_CARDINALITY_STORAGE", "modulename": "outrank.core_ranking", "qualname": "GLOBAL_CARDINALITY_STORAGE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[typing.Any, typing.Any]", "default_value": "{}"}, {"fullname": "outrank.core_ranking.GLOBAL_COUNTS_STORAGE", "modulename": "outrank.core_ranking", "qualname": "GLOBAL_COUNTS_STORAGE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[typing.Any, typing.Any]", "default_value": "{}"}, {"fullname": "outrank.core_ranking.GLOBAL_RARE_VALUE_STORAGE", "modulename": "outrank.core_ranking", "qualname": "GLOBAL_RARE_VALUE_STORAGE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]", "default_value": "Counter()"}, {"fullname": "outrank.core_ranking.GLOBAL_PRIOR_COMB_COUNTS", "modulename": "outrank.core_ranking", "qualname": "GLOBAL_PRIOR_COMB_COUNTS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[typing.Any, int]", "default_value": "Counter()"}, {"fullname": "outrank.core_ranking.IGNORED_VALUES", "modulename": "outrank.core_ranking", "qualname": "IGNORED_VALUES", "kind": "variable", "doc": "<p></p>\n", "default_value": "set()"}, {"fullname": "outrank.core_ranking.HYPERLL_ERROR_BOUND", "modulename": "outrank.core_ranking", "qualname": "HYPERLL_ERROR_BOUND", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.02"}, {"fullname": "outrank.core_ranking.MAX_FEATURES_3MR", "modulename": "outrank.core_ranking", "qualname": "MAX_FEATURES_3MR", "kind": "variable", "doc": "<p></p>\n", "default_value": "10000"}, {"fullname": "outrank.core_ranking.prior_combinations_sample", "modulename": "outrank.core_ranking", "qualname": "prior_combinations_sample", "kind": "function", "doc": "<p>Make sure only relevant subspace of combinations is selected based on prior counts</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">combinations</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.get_combinations_from_columns", "modulename": "outrank.core_ranking", "qualname": "get_combinations_from_columns", "kind": "function", "doc": "<p>Return feature-feature &amp; feature-label combinations, depending on the heuristic and ranking scope</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">all_columns</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">indexes</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Index</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.mixed_rank_graph", "modulename": "outrank.core_ranking", "qualname": "mixed_rank_graph", "kind": "function", "doc": "<p>Compute the full mixed rank graph corresponding to all pairwise feature interactions based on the selected heuristic</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">cpu_pool</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">pbar</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">outrank</span><span class=\"o\">.</span><span class=\"n\">core_utils</span><span class=\"o\">.</span><span class=\"n\">BatchRankingSummary</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.enrich_with_transformations", "modulename": "outrank.core_ranking", "qualname": "enrich_with_transformations", "kind": "function", "doc": "<p>Construct a collection of new features based on pre-defined transformations/rules</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">num_col_types</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.compute_combined_features", "modulename": "outrank.core_ranking", "qualname": "compute_combined_features", "kind": "function", "doc": "<p>Compute higher order features via xxhash-based trick.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">pbar</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">is_3mr</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.compute_expanded_multivalue_features", "modulename": "outrank.core_ranking", "qualname": "compute_expanded_multivalue_features", "kind": "function", "doc": "<p>Compute one-hot encoded feature space based on each designated multivalue feature. E.g., feature with value \"a,b,c\" becomes three features, values of which are presence of a given value in a mutlivalue feature of choice.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">pbar</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.compute_subfeatures", "modulename": "outrank.core_ranking", "qualname": "compute_subfeatures", "kind": "function", "doc": "<p>Compute derived features that are more fine-grained. Implements logic around two operators that govern feature construction.\n->: One sided construction - every value from left side is fine, separate ones from the right side feature will be considered.\n&lt;->: Two sided construction - two-sided values present. This means that each value from a is combined with each from b, forming |A|*|B| new features (one-hot encoded)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">pbar</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.include_noisy_features", "modulename": "outrank.core_ranking", "qualname": "include_noisy_features", "kind": "function", "doc": "<p>Add randomized features that serve as a sanity check</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.compute_coverage", "modulename": "outrank.core_ranking", "qualname": "compute_coverage", "kind": "function", "doc": "<p>Compute coverage of features, incrementally</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.compute_feature_memory_consumption", "modulename": "outrank.core_ranking", "qualname": "compute_feature_memory_consumption", "kind": "function", "doc": "<p>An approximation of how much feature take up</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.compute_value_counts", "modulename": "outrank.core_ranking", "qualname": "compute_value_counts", "kind": "function", "doc": "<p>Update the count structure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.compute_cardinalities", "modulename": "outrank.core_ranking", "qualname": "compute_cardinalities", "kind": "function", "doc": "<p>Compute cardinalities of features, incrementally</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">pbar</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">max_unique_hist_constraint</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.compute_bounds_increment", "modulename": "outrank.core_ranking", "qualname": "compute_bounds_increment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">numeric_column_types</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.compute_batch_ranking", "modulename": "outrank.core_ranking", "qualname": "compute_batch_ranking", "kind": "function", "doc": "<p>Enrich the feature space and compute the batch importances</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">line_tmp_storage</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">numeric_column_types</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">cpu_pool</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">column_descriptions</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">pbar</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">outrank</span><span class=\"o\">.</span><span class=\"n\">core_utils</span><span class=\"o\">.</span><span class=\"n\">BatchRankingSummary</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.get_grouped_df", "modulename": "outrank.core_ranking", "qualname": "get_grouped_df", "kind": "function", "doc": "<p>A helper method that enables median-based aggregation after processing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">importances_df_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.checkpoint_importances_df", "modulename": "outrank.core_ranking", "qualname": "checkpoint_importances_df", "kind": "function", "doc": "<p>A helper which stores intermediary state - useful for longer runs</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">importances_batch</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_ranking.estimate_importances_minibatches", "modulename": "outrank.core_ranking", "qualname": "estimate_importances_minibatches", "kind": "function", "doc": "<p>Interaction score estimator - suitable for example for csv-like input data types.\nThis type of data is normally a single large csv, meaning that minibatch processing needs to\nhappen during incremental handling of the file (that\"s not the case for pre-separated ob data)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">column_descriptions</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">fw_col_mapping</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">numeric_column_types</span><span class=\"p\">:</span> <span class=\"nb\">set</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100000</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">data_encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cpu_pool</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">delimiter</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">feature_construction_mode</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]],</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">defaultdict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]],</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_selftest", "modulename": "outrank.core_selftest", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.core_utils", "modulename": "outrank.core_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.core_utils.pro_tips", "modulename": "outrank.core_utils", "qualname": "pro_tips", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;OutRank can construct subfeatures; features based on subspaces. Example command argument is: --subfeature_mapping &quot;feature_a-&gt;feature_b;feature_c&lt;-&gt;feature_d;feature_c&lt;-&gt;feature_e&quot;&#x27;, &#x27;Heuristic MI-numba-randomized seems like the best of both worlds! (speed + performance).&#x27;, &#x27;Heuristic surrogate-lr performs cross-validation (internally), keep that in mind!&#x27;, &#x27;Consider running OutRank on a smaller data sample first, might be enough (--subsampling = a lot).&#x27;, &#x27;There are two types of combinations supported; unsupervised pairwise ranking (redundancies- --target_ranking_only=False), and supervised combinations - (--interaction_order &gt; 1)&#x27;, &#x27;Visualization part also includes clustering - this might be very insightful!&#x27;, &#x27;By default OutRank includes feature cardinality and coverage in feature names (card; cov)&#x27;, &#x27;Intermediary checkpoints (tmp_checkpoint.tsv) might already give you insights during longer runs.&#x27;, &#x27;In theory, you can rank redundancies of combined features (--interaction_order AND --target_ranking_only=False).&#x27;, &#x27;Give it as many threads as physically possible (--num_threads).&#x27;, &#x27;You can speed up ranking by diminishing feature buffer size (--combination_number_upper_bound determines how many ranking computations per batch will be considered). This, and --subsampling are very powerful together.&#x27;, &#x27;Want to rank feature transformations, but not sure which ones to choose? --transformers=default should serve as a solid baseline (common DS transformations included).&#x27;, &#x27;Your target can be any feature! (explaining one feature with others)&#x27;, &#x27;OutRank uses HyperLogLog for cardinality estimation - this is also a potential usecase (understanding cardinalities across different data sets).&#x27;, &#x27;Each feature is named as featureName(cardinality, coverage in percents) in the final files.&#x27;, &#x27;You can generate candidate feature transformation ranges (fw) by using --task=feature_summary_transformers.&#x27;]"}, {"fullname": "outrank.core_utils.write_json_dump_to_file", "modulename": "outrank.core_utils", "qualname": "write_json_dump_to_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">config_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.internal_hash", "modulename": "outrank.core_utils", "qualname": "internal_hash", "kind": "function", "doc": "<p>A generic internal hash used throughout ranking procedure - let's hardcode seed here for sure</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_obj</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.DatasetInformationStorage", "modulename": "outrank.core_utils", "qualname": "DatasetInformationStorage", "kind": "class", "doc": "<p>A generic class for holding properties of a given type of dataset</p>\n"}, {"fullname": "outrank.core_utils.DatasetInformationStorage.__init__", "modulename": "outrank.core_utils", "qualname": "DatasetInformationStorage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">column_names</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">column_types</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">col_delimiter</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">fw_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "outrank.core_utils.DatasetInformationStorage.data_path", "modulename": "outrank.core_utils", "qualname": "DatasetInformationStorage.data_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "outrank.core_utils.DatasetInformationStorage.column_names", "modulename": "outrank.core_utils", "qualname": "DatasetInformationStorage.column_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[str]"}, {"fullname": "outrank.core_utils.DatasetInformationStorage.column_types", "modulename": "outrank.core_utils", "qualname": "DatasetInformationStorage.column_types", "kind": "variable", "doc": "<p></p>\n", "annotation": ": set[str]"}, {"fullname": "outrank.core_utils.DatasetInformationStorage.col_delimiter", "modulename": "outrank.core_utils", "qualname": "DatasetInformationStorage.col_delimiter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "outrank.core_utils.DatasetInformationStorage.encoding", "modulename": "outrank.core_utils", "qualname": "DatasetInformationStorage.encoding", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "outrank.core_utils.DatasetInformationStorage.fw_map", "modulename": "outrank.core_utils", "qualname": "DatasetInformationStorage.fw_map", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, str] | None"}, {"fullname": "outrank.core_utils.NumericFeatureSummary", "modulename": "outrank.core_utils", "qualname": "NumericFeatureSummary", "kind": "class", "doc": "<p>A generic class storing numeric feature statistics</p>\n"}, {"fullname": "outrank.core_utils.NumericFeatureSummary.__init__", "modulename": "outrank.core_utils", "qualname": "NumericFeatureSummary.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">feature_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">minimum</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">maximum</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">median</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">num_unique</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "outrank.core_utils.NumericFeatureSummary.feature_name", "modulename": "outrank.core_utils", "qualname": "NumericFeatureSummary.feature_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "outrank.core_utils.NumericFeatureSummary.minimum", "modulename": "outrank.core_utils", "qualname": "NumericFeatureSummary.minimum", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "outrank.core_utils.NumericFeatureSummary.maximum", "modulename": "outrank.core_utils", "qualname": "NumericFeatureSummary.maximum", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "outrank.core_utils.NumericFeatureSummary.median", "modulename": "outrank.core_utils", "qualname": "NumericFeatureSummary.median", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "outrank.core_utils.NumericFeatureSummary.num_unique", "modulename": "outrank.core_utils", "qualname": "NumericFeatureSummary.num_unique", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "outrank.core_utils.NominalFeatureSummary", "modulename": "outrank.core_utils", "qualname": "NominalFeatureSummary", "kind": "class", "doc": "<p>A generic class storing numeric feature statistics</p>\n"}, {"fullname": "outrank.core_utils.NominalFeatureSummary.__init__", "modulename": "outrank.core_utils", "qualname": "NominalFeatureSummary.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">feature_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">num_unique</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "outrank.core_utils.NominalFeatureSummary.feature_name", "modulename": "outrank.core_utils", "qualname": "NominalFeatureSummary.feature_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "outrank.core_utils.NominalFeatureSummary.num_unique", "modulename": "outrank.core_utils", "qualname": "NominalFeatureSummary.num_unique", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "outrank.core_utils.BatchRankingSummary", "modulename": "outrank.core_utils", "qualname": "BatchRankingSummary", "kind": "class", "doc": "<p>A generic class representing batched ranking results</p>\n"}, {"fullname": "outrank.core_utils.BatchRankingSummary.__init__", "modulename": "outrank.core_utils", "qualname": "BatchRankingSummary.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">triplet_scores</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">step_times</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "outrank.core_utils.BatchRankingSummary.triplet_scores", "modulename": "outrank.core_utils", "qualname": "BatchRankingSummary.triplet_scores", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[tuple[str, str, float]]"}, {"fullname": "outrank.core_utils.BatchRankingSummary.step_times", "modulename": "outrank.core_utils", "qualname": "BatchRankingSummary.step_times", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "outrank.core_utils.display_random_tip", "modulename": "outrank.core_utils", "qualname": "display_random_tip", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.get_dataset_info", "modulename": "outrank.core_utils", "qualname": "get_dataset_info", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.display_tool_name", "modulename": "outrank.core_utils", "qualname": "display_tool_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.parse_ob_line", "modulename": "outrank.core_utils", "qualname": "parse_ob_line", "kind": "function", "doc": "<p>Outbrain line parsing - generic TSVs</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">line_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">delimiter</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.parse_ob_line_vw", "modulename": "outrank.core_utils", "qualname": "parse_ob_line_vw", "kind": "function", "doc": "<p>Parse a sparse vw line into a pandas df with pre-defined namespace</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">line_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">delimiter</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fw_col_mapping</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">table_header</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_namespace_info</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.parse_ob_csv_line", "modulename": "outrank.core_utils", "qualname": "parse_ob_csv_line", "kind": "function", "doc": "<p>Data can have commas within JSON field dumps</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">line_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">delimiter</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;,&#39;</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.generic_line_parser", "modulename": "outrank.core_utils", "qualname": "generic_line_parser", "kind": "function", "doc": "<p>A generic method aimed to parse data from different sources.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">line_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">delimiter</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fw_col_mapping</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">table_header</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.read_reference_json", "modulename": "outrank.core_utils", "qualname": "read_reference_json", "kind": "function", "doc": "<p>A helper method for reading a JSON</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">json_path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.parse_namespace", "modulename": "outrank.core_utils", "qualname": "parse_namespace", "kind": "function", "doc": "<p>Parse the feature namespace for type awareness</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">namespace_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.read_column_names", "modulename": "outrank.core_utils", "qualname": "read_column_names", "kind": "function", "doc": "<p>Read the col. header</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mapping_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.parse_ob_vw_feature_information", "modulename": "outrank.core_utils", "qualname": "parse_ob_vw_feature_information", "kind": "function", "doc": "<p>A generic parser of ob-based data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">outrank</span><span class=\"o\">.</span><span class=\"n\">core_utils</span><span class=\"o\">.</span><span class=\"n\">DatasetInformationStorage</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.parse_ob_raw_feature_information", "modulename": "outrank.core_utils", "qualname": "parse_ob_raw_feature_information", "kind": "function", "doc": "<p>A generic parser of ob-based data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">outrank</span><span class=\"o\">.</span><span class=\"n\">core_utils</span><span class=\"o\">.</span><span class=\"n\">DatasetInformationStorage</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.parse_ob_feature_information", "modulename": "outrank.core_utils", "qualname": "parse_ob_feature_information", "kind": "function", "doc": "<p>A generic parser of ob-based data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">outrank</span><span class=\"o\">.</span><span class=\"n\">core_utils</span><span class=\"o\">.</span><span class=\"n\">DatasetInformationStorage</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.parse_csv_with_description_information", "modulename": "outrank.core_utils", "qualname": "parse_csv_with_description_information", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">outrank</span><span class=\"o\">.</span><span class=\"n\">core_utils</span><span class=\"o\">.</span><span class=\"n\">DatasetInformationStorage</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.parse_csv_raw", "modulename": "outrank.core_utils", "qualname": "parse_csv_raw", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_path</span></span><span class=\"return-annotation\">) -> <span class=\"n\">outrank</span><span class=\"o\">.</span><span class=\"n\">core_utils</span><span class=\"o\">.</span><span class=\"n\">DatasetInformationStorage</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.extract_features_from_reference_JSON", "modulename": "outrank.core_utils", "qualname": "extract_features_from_reference_JSON", "kind": "function", "doc": "<p>Given a model's JSON, extract unique features</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">json_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">combined_features_only</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">all_features</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.summarize_feature_bounds_for_transformers", "modulename": "outrank.core_utils", "qualname": "summarize_feature_bounds_for_transformers", "kind": "function", "doc": "<p>summarization auxilliary method for generating JSON-based specs</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bounds_object_storage</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">feature_types</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">task_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">label_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>,</span><span class=\"param\">\t<span class=\"n\">output_summary_table_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.summarize_rare_counts", "modulename": "outrank.core_utils", "qualname": "summarize_rare_counts", "kind": "function", "doc": "<p>Write rare values</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">term_counter</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">cardinality_object</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">object_info</span><span class=\"p\">:</span> <span class=\"n\">outrank</span><span class=\"o\">.</span><span class=\"n\">core_utils</span><span class=\"o\">.</span><span class=\"n\">DatasetInformationStorage</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.is_prior_heuristic", "modulename": "outrank.core_utils", "qualname": "is_prior_heuristic", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.core_utils.get_num_of_instances", "modulename": "outrank.core_utils", "qualname": "get_num_of_instances", "kind": "function", "doc": "<p>Count the number of lines in a file, fast - useful for progress logging</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.feature_transformations", "modulename": "outrank.feature_transformations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.feature_transformations.feature_transformer_vault", "modulename": "outrank.feature_transformations.feature_transformer_vault", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.feature_transformations.feature_transformer_vault.default_transformers", "modulename": "outrank.feature_transformations.feature_transformer_vault.default_transformers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.feature_transformations.feature_transformer_vault.default_transformers.MINIMAL_TRANSFORMERS", "modulename": "outrank.feature_transformations.feature_transformer_vault.default_transformers", "qualname": "MINIMAL_TRANSFORMERS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;_tr_sqrt&#x27;: &#x27;np.sqrt(X)&#x27;, &#x27;_tr_log(x+1)&#x27;: &#x27;np.log(X + 1)&#x27;, &#x27;_tr_sqrt(abs(x))&#x27;: &#x27;np.sqrt(np.abs(X))&#x27;, &#x27;_tr_log(abs(x)+1)&#x27;: &#x27;np.log(np.abs(X) + 1)&#x27;}"}, {"fullname": "outrank.feature_transformations.feature_transformer_vault.default_transformers.DEFAULT_TRANSFORMERS", "modulename": "outrank.feature_transformations.feature_transformer_vault.default_transformers", "qualname": "DEFAULT_TRANSFORMERS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;_tr_sqrt&#x27;: &#x27;np.sqrt(X)&#x27;, &#x27;_tr_log(x+1)&#x27;: &#x27;np.log(X + 1)&#x27;, &#x27;_tr_sqrt(abs(x))&#x27;: &#x27;np.sqrt(np.abs(X))&#x27;, &#x27;_tr_log(abs(x)+1)&#x27;: &#x27;np.log(np.abs(X) + 1)&#x27;, &#x27;_tr_div(x,abs(x))*log(abs(x))&#x27;: &#x27;np.divide(X, np.abs(X)) * np.log(np.abs(X))&#x27;, &#x27;_tr_log(x + sqrt(pow(x,2), 1)&#x27;: &#x27;np.log(X + np.sqrt(np.power(X, 2) + 1))&#x27;, &#x27;_tr_log*sqrt&#x27;: &#x27;np.log(X + 1) * np.sqrt(X)&#x27;, &#x27;_tr_log*100&#x27;: &#x27;np.round(np.log(X + 1) * 100, 0)&#x27;, &#x27;_tr_nonzero&#x27;: &#x27;np.where(X != 0, 1, 0)&#x27;, &#x27;_tr_round(div(x,max))&#x27;: &#x27;np.round(np.divide(X, np.max(X)), 0)&#x27;}"}, {"fullname": "outrank.feature_transformations.feature_transformer_vault.fw_transformers", "modulename": "outrank.feature_transformations.feature_transformer_vault.fw_transformers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.feature_transformations.feature_transformer_vault.fw_transformers.FW_TRANSFORMERS", "modulename": "outrank.feature_transformations.feature_transformer_vault.fw_transformers", "qualname": "FW_TRANSFORMERS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;_tr_sqrt&#x27;: &#x27;np.sqrt(X)&#x27;, &#x27;_tr_log(x+1)&#x27;: &#x27;np.log(X + 1)&#x27;, &#x27;_tr_sqrt(abs(x))&#x27;: &#x27;np.sqrt(np.abs(X))&#x27;, &#x27;_tr_log(abs(x)+1)&#x27;: &#x27;np.log(np.abs(X) + 1)&#x27;, &#x27;_tr_div(x,abs(x))*log(abs(x))&#x27;: &#x27;np.divide(X, np.abs(X)) * np.log(np.abs(X))&#x27;, &#x27;_tr_log(x + sqrt(pow(x,2), 1)&#x27;: &#x27;np.log(X + np.sqrt(np.power(X, 2) + 1))&#x27;, &#x27;_tr_log*sqrt&#x27;: &#x27;np.log(X + 1) * np.sqrt(X)&#x27;, &#x27;_tr_log*100&#x27;: &#x27;np.round(np.log(X + 1) * 100, 0)&#x27;, &#x27;_tr_nonzero&#x27;: &#x27;np.where(X != 0, 1, 0)&#x27;, &#x27;_tr_round(div(x,max))&#x27;: &#x27;np.round(np.divide(X, np.max(X)), 0)&#x27;, &#x27;_tr_fw_sqrt_res_1_gt_1&#x27;: &#x27;np.where(X &lt; 1, X, np.where(X&gt;1 ,np.round(np.sqrt(X-1)*1,0), 0))&#x27;, &#x27;_tr_fw_log_res_1_gt_1&#x27;: &#x27;np.where(X &lt;1, X, np.where(X &gt;1, np.round(np.log(X-1)*1,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_1_gt_2&#x27;: &#x27;np.where(X &lt; 2, X, np.where(X&gt;2 ,np.round(np.sqrt(X-2)*1,0), 0))&#x27;, &#x27;_tr_fw_log_res_1_gt_2&#x27;: &#x27;np.where(X &lt;2, X, np.where(X &gt;2, np.round(np.log(X-2)*1,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_1_gt_4&#x27;: &#x27;np.where(X &lt; 4, X, np.where(X&gt;4 ,np.round(np.sqrt(X-4)*1,0), 0))&#x27;, &#x27;_tr_fw_log_res_1_gt_4&#x27;: &#x27;np.where(X &lt;4, X, np.where(X &gt;4, np.round(np.log(X-4)*1,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_1_gt_8&#x27;: &#x27;np.where(X &lt; 8, X, np.where(X&gt;8 ,np.round(np.sqrt(X-8)*1,0), 0))&#x27;, &#x27;_tr_fw_log_res_1_gt_8&#x27;: &#x27;np.where(X &lt;8, X, np.where(X &gt;8, np.round(np.log(X-8)*1,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_1_gt_16&#x27;: &#x27;np.where(X &lt; 16, X, np.where(X&gt;16 ,np.round(np.sqrt(X-16)*1,0), 0))&#x27;, &#x27;_tr_fw_log_res_1_gt_16&#x27;: &#x27;np.where(X &lt;16, X, np.where(X &gt;16, np.round(np.log(X-16)*1,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_1_gt_32&#x27;: &#x27;np.where(X &lt; 32, X, np.where(X&gt;32 ,np.round(np.sqrt(X-32)*1,0), 0))&#x27;, &#x27;_tr_fw_log_res_1_gt_32&#x27;: &#x27;np.where(X &lt;32, X, np.where(X &gt;32, np.round(np.log(X-32)*1,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_1_gt_64&#x27;: &#x27;np.where(X &lt; 64, X, np.where(X&gt;64 ,np.round(np.sqrt(X-64)*1,0), 0))&#x27;, &#x27;_tr_fw_log_res_1_gt_64&#x27;: &#x27;np.where(X &lt;64, X, np.where(X &gt;64, np.round(np.log(X-64)*1,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_1_gt_96&#x27;: &#x27;np.where(X &lt; 96, X, np.where(X&gt;96 ,np.round(np.sqrt(X-96)*1,0), 0))&#x27;, &#x27;_tr_fw_log_res_1_gt_96&#x27;: &#x27;np.where(X &lt;96, X, np.where(X &gt;96, np.round(np.log(X-96)*1,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_10_gt_1&#x27;: &#x27;np.where(X &lt; 1, X, np.where(X&gt;1 ,np.round(np.sqrt(X-1)*10,0), 0))&#x27;, &#x27;_tr_fw_log_res_10_gt_1&#x27;: &#x27;np.where(X &lt;1, X, np.where(X &gt;1, np.round(np.log(X-1)*10,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_10_gt_2&#x27;: &#x27;np.where(X &lt; 2, X, np.where(X&gt;2 ,np.round(np.sqrt(X-2)*10,0), 0))&#x27;, &#x27;_tr_fw_log_res_10_gt_2&#x27;: &#x27;np.where(X &lt;2, X, np.where(X &gt;2, np.round(np.log(X-2)*10,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_10_gt_4&#x27;: &#x27;np.where(X &lt; 4, X, np.where(X&gt;4 ,np.round(np.sqrt(X-4)*10,0), 0))&#x27;, &#x27;_tr_fw_log_res_10_gt_4&#x27;: &#x27;np.where(X &lt;4, X, np.where(X &gt;4, np.round(np.log(X-4)*10,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_10_gt_8&#x27;: &#x27;np.where(X &lt; 8, X, np.where(X&gt;8 ,np.round(np.sqrt(X-8)*10,0), 0))&#x27;, &#x27;_tr_fw_log_res_10_gt_8&#x27;: &#x27;np.where(X &lt;8, X, np.where(X &gt;8, np.round(np.log(X-8)*10,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_10_gt_16&#x27;: &#x27;np.where(X &lt; 16, X, np.where(X&gt;16 ,np.round(np.sqrt(X-16)*10,0), 0))&#x27;, &#x27;_tr_fw_log_res_10_gt_16&#x27;: &#x27;np.where(X &lt;16, X, np.where(X &gt;16, np.round(np.log(X-16)*10,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_10_gt_32&#x27;: &#x27;np.where(X &lt; 32, X, np.where(X&gt;32 ,np.round(np.sqrt(X-32)*10,0), 0))&#x27;, &#x27;_tr_fw_log_res_10_gt_32&#x27;: &#x27;np.where(X &lt;32, X, np.where(X &gt;32, np.round(np.log(X-32)*10,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_10_gt_64&#x27;: &#x27;np.where(X &lt; 64, X, np.where(X&gt;64 ,np.round(np.sqrt(X-64)*10,0), 0))&#x27;, &#x27;_tr_fw_log_res_10_gt_64&#x27;: &#x27;np.where(X &lt;64, X, np.where(X &gt;64, np.round(np.log(X-64)*10,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_10_gt_96&#x27;: &#x27;np.where(X &lt; 96, X, np.where(X&gt;96 ,np.round(np.sqrt(X-96)*10,0), 0))&#x27;, &#x27;_tr_fw_log_res_10_gt_96&#x27;: &#x27;np.where(X &lt;96, X, np.where(X &gt;96, np.round(np.log(X-96)*10,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_50_gt_1&#x27;: &#x27;np.where(X &lt; 1, X, np.where(X&gt;1 ,np.round(np.sqrt(X-1)*50,0), 0))&#x27;, &#x27;_tr_fw_log_res_50_gt_1&#x27;: &#x27;np.where(X &lt;1, X, np.where(X &gt;1, np.round(np.log(X-1)*50,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_50_gt_2&#x27;: &#x27;np.where(X &lt; 2, X, np.where(X&gt;2 ,np.round(np.sqrt(X-2)*50,0), 0))&#x27;, &#x27;_tr_fw_log_res_50_gt_2&#x27;: &#x27;np.where(X &lt;2, X, np.where(X &gt;2, np.round(np.log(X-2)*50,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_50_gt_4&#x27;: &#x27;np.where(X &lt; 4, X, np.where(X&gt;4 ,np.round(np.sqrt(X-4)*50,0), 0))&#x27;, &#x27;_tr_fw_log_res_50_gt_4&#x27;: &#x27;np.where(X &lt;4, X, np.where(X &gt;4, np.round(np.log(X-4)*50,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_50_gt_8&#x27;: &#x27;np.where(X &lt; 8, X, np.where(X&gt;8 ,np.round(np.sqrt(X-8)*50,0), 0))&#x27;, &#x27;_tr_fw_log_res_50_gt_8&#x27;: &#x27;np.where(X &lt;8, X, np.where(X &gt;8, np.round(np.log(X-8)*50,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_50_gt_16&#x27;: &#x27;np.where(X &lt; 16, X, np.where(X&gt;16 ,np.round(np.sqrt(X-16)*50,0), 0))&#x27;, &#x27;_tr_fw_log_res_50_gt_16&#x27;: &#x27;np.where(X &lt;16, X, np.where(X &gt;16, np.round(np.log(X-16)*50,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_50_gt_32&#x27;: &#x27;np.where(X &lt; 32, X, np.where(X&gt;32 ,np.round(np.sqrt(X-32)*50,0), 0))&#x27;, &#x27;_tr_fw_log_res_50_gt_32&#x27;: &#x27;np.where(X &lt;32, X, np.where(X &gt;32, np.round(np.log(X-32)*50,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_50_gt_64&#x27;: &#x27;np.where(X &lt; 64, X, np.where(X&gt;64 ,np.round(np.sqrt(X-64)*50,0), 0))&#x27;, &#x27;_tr_fw_log_res_50_gt_64&#x27;: &#x27;np.where(X &lt;64, X, np.where(X &gt;64, np.round(np.log(X-64)*50,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_50_gt_96&#x27;: &#x27;np.where(X &lt; 96, X, np.where(X&gt;96 ,np.round(np.sqrt(X-96)*50,0), 0))&#x27;, &#x27;_tr_fw_log_res_50_gt_96&#x27;: &#x27;np.where(X &lt;96, X, np.where(X &gt;96, np.round(np.log(X-96)*50,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_100_gt_1&#x27;: &#x27;np.where(X &lt; 1, X, np.where(X&gt;1 ,np.round(np.sqrt(X-1)*100,0), 0))&#x27;, &#x27;_tr_fw_log_res_100_gt_1&#x27;: &#x27;np.where(X &lt;1, X, np.where(X &gt;1, np.round(np.log(X-1)*100,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_100_gt_2&#x27;: &#x27;np.where(X &lt; 2, X, np.where(X&gt;2 ,np.round(np.sqrt(X-2)*100,0), 0))&#x27;, &#x27;_tr_fw_log_res_100_gt_2&#x27;: &#x27;np.where(X &lt;2, X, np.where(X &gt;2, np.round(np.log(X-2)*100,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_100_gt_4&#x27;: &#x27;np.where(X &lt; 4, X, np.where(X&gt;4 ,np.round(np.sqrt(X-4)*100,0), 0))&#x27;, &#x27;_tr_fw_log_res_100_gt_4&#x27;: &#x27;np.where(X &lt;4, X, np.where(X &gt;4, np.round(np.log(X-4)*100,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_100_gt_8&#x27;: &#x27;np.where(X &lt; 8, X, np.where(X&gt;8 ,np.round(np.sqrt(X-8)*100,0), 0))&#x27;, &#x27;_tr_fw_log_res_100_gt_8&#x27;: &#x27;np.where(X &lt;8, X, np.where(X &gt;8, np.round(np.log(X-8)*100,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_100_gt_16&#x27;: &#x27;np.where(X &lt; 16, X, np.where(X&gt;16 ,np.round(np.sqrt(X-16)*100,0), 0))&#x27;, &#x27;_tr_fw_log_res_100_gt_16&#x27;: &#x27;np.where(X &lt;16, X, np.where(X &gt;16, np.round(np.log(X-16)*100,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_100_gt_32&#x27;: &#x27;np.where(X &lt; 32, X, np.where(X&gt;32 ,np.round(np.sqrt(X-32)*100,0), 0))&#x27;, &#x27;_tr_fw_log_res_100_gt_32&#x27;: &#x27;np.where(X &lt;32, X, np.where(X &gt;32, np.round(np.log(X-32)*100,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_100_gt_64&#x27;: &#x27;np.where(X &lt; 64, X, np.where(X&gt;64 ,np.round(np.sqrt(X-64)*100,0), 0))&#x27;, &#x27;_tr_fw_log_res_100_gt_64&#x27;: &#x27;np.where(X &lt;64, X, np.where(X &gt;64, np.round(np.log(X-64)*100,0), 0))&#x27;, &#x27;_tr_fw_sqrt_res_100_gt_96&#x27;: &#x27;np.where(X &lt; 96, X, np.where(X&gt;96 ,np.round(np.sqrt(X-96)*100,0), 0))&#x27;, &#x27;_tr_fw_log_res_100_gt_96&#x27;: &#x27;np.where(X &lt;96, X, np.where(X &gt;96, np.round(np.log(X-96)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_1_gt_0.01&#x27;: &#x27;np.where(X &lt; 0.01, X, np.where(X&gt;0.01, np.round(np.sqrt(X-0.01)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_1_gt_0.01&#x27;: &#x27;np.where(X &lt;0.01,X, np.where(X&gt;0.01, np.round(np.log(X-0.01)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_1_gt_0.02&#x27;: &#x27;np.where(X &lt; 0.02, X, np.where(X&gt;0.02, np.round(np.sqrt(X-0.02)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_1_gt_0.02&#x27;: &#x27;np.where(X &lt;0.02,X, np.where(X&gt;0.02, np.round(np.log(X-0.02)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_1_gt_0.04&#x27;: &#x27;np.where(X &lt; 0.04, X, np.where(X&gt;0.04, np.round(np.sqrt(X-0.04)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_1_gt_0.04&#x27;: &#x27;np.where(X &lt;0.04,X, np.where(X&gt;0.04, np.round(np.log(X-0.04)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_1_gt_0.08&#x27;: &#x27;np.where(X &lt; 0.08, X, np.where(X&gt;0.08, np.round(np.sqrt(X-0.08)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_1_gt_0.08&#x27;: &#x27;np.where(X &lt;0.08,X, np.where(X&gt;0.08, np.round(np.log(X-0.08)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_1_gt_0.16&#x27;: &#x27;np.where(X &lt; 0.16, X, np.where(X&gt;0.16, np.round(np.sqrt(X-0.16)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_1_gt_0.16&#x27;: &#x27;np.where(X &lt;0.16,X, np.where(X&gt;0.16, np.round(np.log(X-0.16)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_1_gt_0.32&#x27;: &#x27;np.where(X &lt; 0.32, X, np.where(X&gt;0.32, np.round(np.sqrt(X-0.32)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_1_gt_0.32&#x27;: &#x27;np.where(X &lt;0.32,X, np.where(X&gt;0.32, np.round(np.log(X-0.32)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_1_gt_0.64&#x27;: &#x27;np.where(X &lt; 0.64, X, np.where(X&gt;0.64, np.round(np.sqrt(X-0.64)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_1_gt_0.64&#x27;: &#x27;np.where(X &lt;0.64,X, np.where(X&gt;0.64, np.round(np.log(X-0.64)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_1_gt_0.96&#x27;: &#x27;np.where(X &lt; 0.96, X, np.where(X&gt;0.96, np.round(np.sqrt(X-0.96)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_1_gt_0.96&#x27;: &#x27;np.where(X &lt;0.96,X, np.where(X&gt;0.96, np.round(np.log(X-0.96)*1,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_10_gt_0.01&#x27;: &#x27;np.where(X &lt; 0.01, X, np.where(X&gt;0.01, np.round(np.sqrt(X-0.01)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_10_gt_0.01&#x27;: &#x27;np.where(X &lt;0.01,X, np.where(X&gt;0.01, np.round(np.log(X-0.01)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_10_gt_0.02&#x27;: &#x27;np.where(X &lt; 0.02, X, np.where(X&gt;0.02, np.round(np.sqrt(X-0.02)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_10_gt_0.02&#x27;: &#x27;np.where(X &lt;0.02,X, np.where(X&gt;0.02, np.round(np.log(X-0.02)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_10_gt_0.04&#x27;: &#x27;np.where(X &lt; 0.04, X, np.where(X&gt;0.04, np.round(np.sqrt(X-0.04)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_10_gt_0.04&#x27;: &#x27;np.where(X &lt;0.04,X, np.where(X&gt;0.04, np.round(np.log(X-0.04)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_10_gt_0.08&#x27;: &#x27;np.where(X &lt; 0.08, X, np.where(X&gt;0.08, np.round(np.sqrt(X-0.08)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_10_gt_0.08&#x27;: &#x27;np.where(X &lt;0.08,X, np.where(X&gt;0.08, np.round(np.log(X-0.08)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_10_gt_0.16&#x27;: &#x27;np.where(X &lt; 0.16, X, np.where(X&gt;0.16, np.round(np.sqrt(X-0.16)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_10_gt_0.16&#x27;: &#x27;np.where(X &lt;0.16,X, np.where(X&gt;0.16, np.round(np.log(X-0.16)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_10_gt_0.32&#x27;: &#x27;np.where(X &lt; 0.32, X, np.where(X&gt;0.32, np.round(np.sqrt(X-0.32)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_10_gt_0.32&#x27;: &#x27;np.where(X &lt;0.32,X, np.where(X&gt;0.32, np.round(np.log(X-0.32)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_10_gt_0.64&#x27;: &#x27;np.where(X &lt; 0.64, X, np.where(X&gt;0.64, np.round(np.sqrt(X-0.64)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_10_gt_0.64&#x27;: &#x27;np.where(X &lt;0.64,X, np.where(X&gt;0.64, np.round(np.log(X-0.64)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_10_gt_0.96&#x27;: &#x27;np.where(X &lt; 0.96, X, np.where(X&gt;0.96, np.round(np.sqrt(X-0.96)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_10_gt_0.96&#x27;: &#x27;np.where(X &lt;0.96,X, np.where(X&gt;0.96, np.round(np.log(X-0.96)*10,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_50_gt_0.01&#x27;: &#x27;np.where(X &lt; 0.01, X, np.where(X&gt;0.01, np.round(np.sqrt(X-0.01)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_50_gt_0.01&#x27;: &#x27;np.where(X &lt;0.01,X, np.where(X&gt;0.01, np.round(np.log(X-0.01)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_50_gt_0.02&#x27;: &#x27;np.where(X &lt; 0.02, X, np.where(X&gt;0.02, np.round(np.sqrt(X-0.02)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_50_gt_0.02&#x27;: &#x27;np.where(X &lt;0.02,X, np.where(X&gt;0.02, np.round(np.log(X-0.02)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_50_gt_0.04&#x27;: &#x27;np.where(X &lt; 0.04, X, np.where(X&gt;0.04, np.round(np.sqrt(X-0.04)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_50_gt_0.04&#x27;: &#x27;np.where(X &lt;0.04,X, np.where(X&gt;0.04, np.round(np.log(X-0.04)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_50_gt_0.08&#x27;: &#x27;np.where(X &lt; 0.08, X, np.where(X&gt;0.08, np.round(np.sqrt(X-0.08)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_50_gt_0.08&#x27;: &#x27;np.where(X &lt;0.08,X, np.where(X&gt;0.08, np.round(np.log(X-0.08)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_50_gt_0.16&#x27;: &#x27;np.where(X &lt; 0.16, X, np.where(X&gt;0.16, np.round(np.sqrt(X-0.16)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_50_gt_0.16&#x27;: &#x27;np.where(X &lt;0.16,X, np.where(X&gt;0.16, np.round(np.log(X-0.16)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_50_gt_0.32&#x27;: &#x27;np.where(X &lt; 0.32, X, np.where(X&gt;0.32, np.round(np.sqrt(X-0.32)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_50_gt_0.32&#x27;: &#x27;np.where(X &lt;0.32,X, np.where(X&gt;0.32, np.round(np.log(X-0.32)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_50_gt_0.64&#x27;: &#x27;np.where(X &lt; 0.64, X, np.where(X&gt;0.64, np.round(np.sqrt(X-0.64)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_50_gt_0.64&#x27;: &#x27;np.where(X &lt;0.64,X, np.where(X&gt;0.64, np.round(np.log(X-0.64)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_50_gt_0.96&#x27;: &#x27;np.where(X &lt; 0.96, X, np.where(X&gt;0.96, np.round(np.sqrt(X-0.96)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_50_gt_0.96&#x27;: &#x27;np.where(X &lt;0.96,X, np.where(X&gt;0.96, np.round(np.log(X-0.96)*50,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_100_gt_0.01&#x27;: &#x27;np.where(X &lt; 0.01, X, np.where(X&gt;0.01, np.round(np.sqrt(X-0.01)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_100_gt_0.01&#x27;: &#x27;np.where(X &lt;0.01,X, np.where(X&gt;0.01, np.round(np.log(X-0.01)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_100_gt_0.02&#x27;: &#x27;np.where(X &lt; 0.02, X, np.where(X&gt;0.02, np.round(np.sqrt(X-0.02)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_100_gt_0.02&#x27;: &#x27;np.where(X &lt;0.02,X, np.where(X&gt;0.02, np.round(np.log(X-0.02)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_100_gt_0.04&#x27;: &#x27;np.where(X &lt; 0.04, X, np.where(X&gt;0.04, np.round(np.sqrt(X-0.04)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_100_gt_0.04&#x27;: &#x27;np.where(X &lt;0.04,X, np.where(X&gt;0.04, np.round(np.log(X-0.04)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_100_gt_0.08&#x27;: &#x27;np.where(X &lt; 0.08, X, np.where(X&gt;0.08, np.round(np.sqrt(X-0.08)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_100_gt_0.08&#x27;: &#x27;np.where(X &lt;0.08,X, np.where(X&gt;0.08, np.round(np.log(X-0.08)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_100_gt_0.16&#x27;: &#x27;np.where(X &lt; 0.16, X, np.where(X&gt;0.16, np.round(np.sqrt(X-0.16)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_100_gt_0.16&#x27;: &#x27;np.where(X &lt;0.16,X, np.where(X&gt;0.16, np.round(np.log(X-0.16)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_100_gt_0.32&#x27;: &#x27;np.where(X &lt; 0.32, X, np.where(X&gt;0.32, np.round(np.sqrt(X-0.32)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_100_gt_0.32&#x27;: &#x27;np.where(X &lt;0.32,X, np.where(X&gt;0.32, np.round(np.log(X-0.32)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_100_gt_0.64&#x27;: &#x27;np.where(X &lt; 0.64, X, np.where(X&gt;0.64, np.round(np.sqrt(X-0.64)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_100_gt_0.64&#x27;: &#x27;np.where(X &lt;0.64,X, np.where(X&gt;0.64, np.round(np.log(X-0.64)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_sqrt_res_100_gt_0.96&#x27;: &#x27;np.where(X &lt; 0.96, X, np.where(X&gt;0.96, np.round(np.sqrt(X-0.96)*100,0), 0))&#x27;, &#x27;_tr_fw_prob_log_res_100_gt_0.96&#x27;: &#x27;np.where(X &lt;0.96,X, np.where(X&gt;0.96, np.round(np.log(X-0.96)*100,0), 0))&#x27;}"}, {"fullname": "outrank.feature_transformations.feature_transformer_vault.fw_transformers.resolution_range", "modulename": "outrank.feature_transformations.feature_transformer_vault.fw_transformers", "qualname": "resolution_range", "kind": "variable", "doc": "<p></p>\n", "default_value": "[1, 10, 50, 100]"}, {"fullname": "outrank.feature_transformations.feature_transformer_vault.fw_transformers.greater_than_range", "modulename": "outrank.feature_transformations.feature_transformer_vault.fw_transformers", "qualname": "greater_than_range", "kind": "variable", "doc": "<p></p>\n", "default_value": "[1, 2, 4, 8, 16, 32, 64, 96]"}, {"fullname": "outrank.feature_transformations.ranking_transformers", "modulename": "outrank.feature_transformations.ranking_transformers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.feature_transformations.ranking_transformers.FeatureTransformerNoise", "modulename": "outrank.feature_transformations.ranking_transformers", "qualname": "FeatureTransformerNoise", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "outrank.feature_transformations.ranking_transformers.FeatureTransformerNoise.noise_preset", "modulename": "outrank.feature_transformations.ranking_transformers", "qualname": "FeatureTransformerNoise.noise_preset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.feature_transformations.ranking_transformers.FeatureTransformerNoise.construct_new_features", "modulename": "outrank.feature_transformations.ranking_transformers", "qualname": "FeatureTransformerNoise.construct_new_features", "kind": "function", "doc": "<p>Generate a few standard noise distributions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">label_column</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.feature_transformations.ranking_transformers.FeatureTransformerGeneric", "modulename": "outrank.feature_transformations.ranking_transformers", "qualname": "FeatureTransformerGeneric", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "outrank.feature_transformations.ranking_transformers.FeatureTransformerGeneric.__init__", "modulename": "outrank.feature_transformations.ranking_transformers", "qualname": "FeatureTransformerGeneric.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">numeric_column_names</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">preset</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;default&#39;</span></span>)</span>"}, {"fullname": "outrank.feature_transformations.ranking_transformers.FeatureTransformerGeneric.numeric_column_names", "modulename": "outrank.feature_transformations.ranking_transformers", "qualname": "FeatureTransformerGeneric.numeric_column_names", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.feature_transformations.ranking_transformers.FeatureTransformerGeneric.constructed_feature_names", "modulename": "outrank.feature_transformations.ranking_transformers", "qualname": "FeatureTransformerGeneric.constructed_feature_names", "kind": "variable", "doc": "<p></p>\n", "annotation": ": set[str]"}, {"fullname": "outrank.feature_transformations.ranking_transformers.FeatureTransformerGeneric.max_maj_support", "modulename": "outrank.feature_transformations.ranking_transformers", "qualname": "FeatureTransformerGeneric.max_maj_support", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.feature_transformations.ranking_transformers.FeatureTransformerGeneric.nan_prop_support", "modulename": "outrank.feature_transformations.ranking_transformers", "qualname": "FeatureTransformerGeneric.nan_prop_support", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "outrank.feature_transformations.ranking_transformers.FeatureTransformerGeneric.get_vals", "modulename": "outrank.feature_transformations.ranking_transformers", "qualname": "FeatureTransformerGeneric.get_vals", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tmp_df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">col_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.feature_transformations.ranking_transformers.FeatureTransformerGeneric.construct_baseline_features", "modulename": "outrank.feature_transformations.ranking_transformers", "qualname": "FeatureTransformerGeneric.construct_baseline_features", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataframe</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.feature_transformations.ranking_transformers.FeatureTransformerGeneric.construct_new_features", "modulename": "outrank.feature_transformations.ranking_transformers", "qualname": "FeatureTransformerGeneric.construct_new_features", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dataframe</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.task_generators", "modulename": "outrank.task_generators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.task_generators.logger", "modulename": "outrank.task_generators", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger syn-logger (DEBUG)&gt;"}, {"fullname": "outrank.task_generators.outrank_task_generate_data_set", "modulename": "outrank.task_generators", "qualname": "outrank_task_generate_data_set", "kind": "function", "doc": "<p>Core method for generating data sets</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.task_instance_ranking", "modulename": "outrank.task_instance_ranking", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.task_instance_ranking.shannon_ent", "modulename": "outrank.task_instance_ranking", "qualname": "shannon_ent", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.task_instance_ranking.compute_entropy_avg", "modulename": "outrank.task_instance_ranking", "qualname": "compute_entropy_avg", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">line</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.task_instance_ranking.score_line", "modulename": "outrank.task_instance_ranking", "qualname": "score_line", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">line</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.task_instance_ranking.outrank_task_rank_instances", "modulename": "outrank.task_instance_ranking", "qualname": "outrank_task_rank_instances", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.task_ranking", "modulename": "outrank.task_ranking", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.task_ranking.outrank_task_conduct_ranking", "modulename": "outrank.task_ranking", "qualname": "outrank_task_conduct_ranking", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.task_selftest", "modulename": "outrank.task_selftest", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.task_selftest.logger", "modulename": "outrank.task_selftest", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger syn-logger (DEBUG)&gt;"}, {"fullname": "outrank.task_selftest.conduct_self_test", "modulename": "outrank.task_selftest", "qualname": "conduct_self_test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.task_summary", "modulename": "outrank.task_summary", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.task_summary.outrank_task_result_summary", "modulename": "outrank.task_summary", "qualname": "outrank_task_result_summary", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.task_visualization", "modulename": "outrank.task_visualization", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.task_visualization.outrank_task_visualize_results", "modulename": "outrank.task_visualization", "qualname": "outrank_task_visualize_results", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "outrank.visualizations", "modulename": "outrank.visualizations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.visualizations.ranking_visualization", "modulename": "outrank.visualizations.ranking_visualization", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "outrank.visualizations.ranking_visualization.visualize_hierarchical_clusters", "modulename": "outrank.visualizations.ranking_visualization", "qualname": "visualize_hierarchical_clusters", "kind": "function", "doc": "<p>A method for visualization of hierarchical clusters w.r.t. different linkage functions</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">triplet_dataframe</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">output_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">image_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;png&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">max_num_clusters</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.visualizations.ranking_visualization.visualize_heatmap", "modulename": "outrank.visualizations.ranking_visualization", "qualname": "visualize_heatmap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">triplets</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">output_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">image_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.visualizations.ranking_visualization.visualize_barplots", "modulename": "outrank.visualizations.ranking_visualization", "qualname": "visualize_barplots", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">triplets</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">output_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">reference_json</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">image_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">heuristic</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "outrank.visualizations.ranking_visualization.visualize_all", "modulename": "outrank.visualizations.ranking_visualization", "qualname": "visualize_all", "kind": "function", "doc": "<p>A method for visualization of the obtained feature interaction maps.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">triplets</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">output_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">reference_json</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">image_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;png&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">heuristic</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;MI&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();